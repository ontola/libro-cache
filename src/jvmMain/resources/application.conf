ktor {
    deployment {
        port = 3080
        port = ${?PORT}
    }
    application {
        modules = [
            tools.empathy.libro.server.ApplicationKt.module
            tools.empathy.libro.server.invalidator.InvalidatorKt.module
        ]
    }
}

studio {
    domain = "local.rdf.studio"
    domain = ${?STUDIO_DOMAIN}

    skipAuth = false
    skipAuth = ${?STUDIO_SKIP_AUTH}
}

libro {
    defaultLanguage = "en"
    defaultLanguage = ${?DEFAULT_LANGUAGE}

    cacheExpiration = ${?CACHE_EXPIRATION}

    management {
        origin = "https://localhost"
    }

    bundle {
        defaultBundle = "main"
        publicFolder = "f_assets"
    }

    reporting {
        serverReportingKey = ${?SERVER_BUGSNAG_KEY}
        serverReportingKey = ${?SERVER_REPORTING_KEY}

        serverReportingKey = ${?CLIENT_BUGSNAG_KEY}
        clientReportingKey = ${?CLIENT_REPORTING_KEY}
    }

    session {
        secret = ${?SESSION_SECRET}
        jwtEncryptionToken = ${libro.session.secret}
        jwtEncryptionToken = ${?JWT_ENCRYPTION_TOKEN}
        jwtEncryptionToken = ${?JWT_ENCRYPTION_TOKEN}
    }

    maps {
        username = null
        username = ${?MAPBOX_USERNAME}
        key = null
        key = ${?MAPBOX_KEY}
    }

    services {
        base {
            svcDnsPrefix = "svc"
            svcDnsPrefix = ${?SERVICE_DNS_PREFIX}
            clusterDomain = "cluster.local"
            clusterDomain = ${?CLUSTER_DOMAIN}
            clusterUrlBase = ${?libro.services.base.svcDnsPrefix}.${?libro.services.base.clusterDomain}
            clusterUrlBase = ${?CLUSTER_URL_BASE}

            defaultServicePort = "3000"
            defaultServicePort = ${?DEFAULT_SERVICE_PORT}
            defaultServiceProto = "http"
            defaultServiceProto = ${?DEFAULT_SERVICE_PROTO}

            defaultServicePrefix = ${libro.services.base.defaultServiceProto}"://"
            defaultServicePostfix = "."${libro.services.base.clusterUrlBase}":"${libro.services.base.defaultServicePort}
        }

        oidc {
            clientId = ${?LIBRO_CLIENT_ID}
            clientSecret = ${?LIBRO_CLIENT_SECRET}
            url = ""
            url = ${libro.services.data.url}
            url = ${?OIDC_SERVER_URL}
        }

        data {
            name = "data"
            name = ${?DATA_SERVICE_NAME}
            port = ${libro.services.base.defaultServicePort}
            port = ${?APEX_SERVICE_PORT}
            port = ${?DATA_SERVICE_PORT}
            urlPostfix = "."${libro.services.base.clusterUrlBase}":"${libro.services.data.port}
            url = ${libro.services.base.defaultServicePrefix}${libro.services.data.name}${libro.services.data.urlPostfix}
            url = ${?DATA_SERVICE_URL}
            matcher = ".*"
            matcher = ${?DATA_SERVICE_MATCHER}
            bulk = true
            bulk = ${?DATA_SERVICE_BULK}
        }

        email {
            name = "email"
            name = ${?EMAIL_SERVICE_NAME}
            port = ${libro.services.base.defaultServicePort}
            port = ${?EMAIL_SERVICE_PORT}
            urlPostfix = "."${libro.services.base.clusterUrlBase}":"${libro.services.email.port}
            url = ${libro.services.base.defaultServicePrefix}${libro.services.email.name}${libro.services.email.urlPostfix}
            url = ${?EMAIL_SERVICE_URL}
            matcher = "^/email/"
            matcher = ${?EMAIL_SERVICE_MATCHER}
            bulk = false
            bulk = ${?EMAIL_SERVICE_BULK}
        }

        token {
            name = "token"
            name = ${?TOKEN_SERVICE_NAME}
            port = ${libro.services.base.defaultServicePort}
            port = ${?TOKEN_SERVICE_PORT}
            urlPostfix = "."${libro.services.base.clusterUrlBase}":"${libro.services.token.port}
            url = ${libro.services.base.defaultServicePrefix}${libro.services.token.name}${libro.services.token.urlPostfix}
            url = ${?TOKEN_SERVICE_URL}
            matcher = "^(/\\w+)?/tokens"
            matcher = ${?TOKEN_SERVICE_MATCHER}
            bulk = false
            bulk = ${?TOKEN_SERVICE_BULK}
        }

        redis {
            host = "redis"
            host = ${?REDIS_HOST}
            host = ${?REDIS_ADDRESS}
            port = "6379"
            port = ${?REDIS_PORT}
            username = ${?REDIS_USERNAME}
            password = ${?REDIS_PASSWORD}
            ssl = "false"
            ssl = ${?REDIS_SSL}
            db = "8"
            db = ${?CACHE_REDIS_DATABASE}
            persistentDb = "6"
            persistentDb = ${?PERSISTENT_REDIS_DATABASE}
            streamDb = "7"
            streamDb = ${?STREAM_REDIS_DATABASE}

            invalidationChannel = "transactions"
            invalidationChannel = ${?CACHE_STREAM}

            invalidationGroup = "cache"
            invalidationGroup = ${?CACHE_STREAM_GROUP}
        }
    }
}
