ktor {
    deployment {
        port = 3030
        port = ${?PORT}
    }
    application {
        modules = [
            io.ontola.cache.ApplicationKt.module
            io.ontola.cache.invalidator.InvalidatorKt.module
        ]
    }
}

cache {
    defaultLanguage = "en"
    defaultLanguage = ${?DEFAULT_LANGUAGE}

    session {
        secret = ${?SESSION_SECRET}
        jwtEncryptionToken = ${cache.session.secret}
        jwtEncryptionToken = ${?JWT_ENCRYPTION_TOKEN}
    }

    services {
        oidc {
            clientId = ${?ARGU_APP_ID}
            clientId = ${?LIBRO_CLIENT_ID}
        }

        data {
            name = "argu"
            name = ${?DATA_SERVICE_NAME}
            url = "http://argu.svc.cluster.local:2999"
            url = ${?ARGU_API_URL}
            url = ${?DATA_SERVICE_URL}
            matcher = ".*"
            matcher = ${?CACHE_ROUTE_MATCHER}
        }

        email {
            name = "email"
            name = ${?EMAIL_SERVICE_NAME}
            url = "http://"${cache.services.email.name}.svc.cluster.local
            url = ${?EMAIL_SERVICE_URL}
            matcher = "^/email/"
            matcher = ${?EMAIL_SERVICE_MATCHER}
        }

        token {
            name = "token"
            name = ${?TOKEN_SERVICE_NAME}
            url = "http://"${cache.services.token.name}.svc.cluster.local
            url = ${?TOKEN_SERVICE_URL}
            matcher = "^(/\\w+)?/tokens"
            matcher = ${?TOKEN_SERVICE_MATCHER}
        }

        redis {
            host = "redis"
            host = ${?REDIS_HOST}
            port = "6379"
            port = ${?REDIS_PORT}
            db = "8"
            db = ${?CACHE_REDIS_DATABASE}
            libroDb = "12"
            libroDb = ${?LIBRO_REDIS_DATABASE}

            invalidationChannel = "transactions"
            invalidationChannel = ${?CACHE_STREAM}

            invalidationGroup = "cache"
            invalidationGroup = ${?CACHE_STREAM_GROUP}
        }
    }
}
